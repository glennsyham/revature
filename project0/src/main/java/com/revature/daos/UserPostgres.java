package com.revature.daos;

import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import com.revature.models.User;
import com.revature.util.ConnectionUtil;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

public class UserPostgres implements UserDAO {
	private static Logger log = LogManager.getLogger(UserPostgres.class);
	private String _table = "users";

	@Override
	public User createUser(User u) {
		String sql = "insert into " + _table + " (username, password, role_id) values (?,?,?) returning id;";
		try (Connection c = ConnectionUtil.getConnectionFromFile()) {
			PreparedStatement ps = c.prepareStatement(sql);
			ps.setString(1, u.getUsername().trim().toLowerCase());
			ps.setString(2, u.getPassword());
			ps.setInt(3, u.getRole_id());
			log.info(ps);
			ResultSet rs = ps.executeQuery(); // return the id generated by the database
			if (rs.next()) {
				u.setId(rs.getInt("id"));
			}

		} catch (SQLException | IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return u;
	}

	@Override
	public User retrieveUserById(int id) {
		String sql = "select * from " + _table + " where id = ?;";
		User user = null;

		try (Connection c = ConnectionUtil.getConnectionFromFile()) {
			PreparedStatement ps = c.prepareStatement(sql);

			ps.setInt(1, id); // this refers to the 1st ? in the sql String
			log.info(ps);
			ResultSet rs = ps.executeQuery();

			if (rs.next()) {
				user = new User();
				returnData(rs, user);
			}
		} catch (SQLException | IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return user;
	}

	@Override
	public List<User> retrieveUsers() {
		String sql = "select * from users;";
		List<User> users = new ArrayList<>();

		try (Connection c = ConnectionUtil.getConnectionFromFile()) {
			// no user input taken, no need for prepared statement
			Statement s = c.createStatement();
			ResultSet rs = s.executeQuery(sql);

			while (rs.next()) {
				// extract each field from rs for each record, map them to a User object and add
				// them to the user arrayliost
				User u = new User();
				returnData(rs, u);

				users.add(u);
			}
		} catch (SQLException | IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return users;
	}

	@Override
	public User retrieveUserByUsername(String username) {
		String sql = "select * from " + _table + " where LOWER(username)  = ?;";
		User u = null;

		try (Connection c = ConnectionUtil.getConnectionFromFile();) {
			PreparedStatement ps = c.prepareStatement(sql);

			ps.setString(1, username.toLowerCase()); // this refers to the 1st "?" in the sql string, allows to inject
														// data
			log.info(ps);
			ResultSet rs = ps.executeQuery();

			if (rs.next()) {
				u = new User();
				returnData(rs, u);
			}

		} catch (SQLException | IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return u;
	}

	@Override
	public boolean updateUser(User u) {
		String sql = "update " + _table + " set username = ?, password = ? where id = ?;";
		int rowsChanged = -1;

		try (Connection c = ConnectionUtil.getConnectionFromFile()) {
			PreparedStatement ps = c.prepareStatement(sql);

			ps.setString(1, u.getUsername().toLowerCase());
			ps.setString(2, u.getPassword());
			ps.setInt(3, u.getId());
			log.info(ps);
			rowsChanged = ps.executeUpdate();

		} catch (SQLException | IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		if (rowsChanged < 1) {
			return false;
		}
		return true;
	}

	@Override
	public boolean deleteUserById(int id) {
		String sql = "delete from " + _table + " where id = ?;";
		int rowsChanged = -1;
		try (Connection c = ConnectionUtil.getConnectionFromFile()) {
			PreparedStatement ps = c.prepareStatement(sql);

			ps.setInt(1, id);
			log.info(ps);
			rowsChanged = ps.executeUpdate();

		} catch (SQLException | IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		if (rowsChanged < 1) {
			return false;
		}
		return true;
	}

	@Override
	public User returnData(ResultSet rs, User user) {
		// TODO Auto-generated method stub
		try {
			user.setId(rs.getInt("id"));
			user.setUsername(rs.getString("username"));
			user.setPassword(rs.getString("password"));
			user.setRole_id(rs.getInt("role_id"));
			user.setStatus(rs.getInt("status"));
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return user;
	}

	@Override
	public boolean updateUserStatus(int uid, int status) {
		String sql = "update " + _table + " set status = ? where id = ?;";
		int rowsChanged = -1;

		try (Connection c = ConnectionUtil.getConnectionFromFile()) {
			PreparedStatement ps = c.prepareStatement(sql);

			ps.setInt(1, status);
			ps.setInt(2, uid);
			log.info(ps);
			rowsChanged = ps.executeUpdate();

		} catch (SQLException | IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		if (rowsChanged < 1) {
			return false;
		}
		return true;
	}

	@Override
	public List<User> retrieveUsersByRoleid(int rid) {
		String sql = "select * from " + _table + " where role_id = ?;";
		List<User> users = new ArrayList<>();

		try (Connection c = ConnectionUtil.getConnectionFromFile()) {
			PreparedStatement ps = c.prepareStatement(sql);

			ps.setInt(1, rid); // this refers to the 1st ? in the sql String
			log.info(ps);
			ResultSet rs = ps.executeQuery();

			while (rs.next()) {
				// extract each field from rs for each record, map them to a User object and add
				// them to the user arrayliost
				User u = new User();
				returnData(rs, u);

				users.add(u);
			}
		} catch (SQLException | IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return users;
	}

}
