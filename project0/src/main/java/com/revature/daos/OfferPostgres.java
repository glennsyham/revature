package com.revature.daos;

import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import com.revature.models.Offer;
import com.revature.util.ConnectionUtil;

public class OfferPostgres implements OfferDAO {
	private String _table = "offers";
	private static Logger log = LogManager.getLogger(OfferPostgres.class);

	@Override
	public Offer createOffer(Offer o) {
		String sql = "insert into " + _table + " (offer_price , product_id, user_id  ) values (?,?,?) returning id;";
		try (Connection c = ConnectionUtil.getConnectionFromFile()) {
			PreparedStatement ps = c.prepareStatement(sql);
			ps.setDouble(1, o.getOffer_price());
			ps.setInt(2, o.getProduct_id());
			ps.setInt(3, o.getUser_id());
			log.info(ps);
			ResultSet rs = ps.executeQuery(); // return the id generated by the database
			if (rs.next()) {
				o.setId(rs.getInt("id"));
			}

		} catch (SQLException | IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return o;
	}

	@Override
	public Offer retrieveOfferById(int id) {
		String sql = "select * from " + _table + " where id = ?";
		Offer offer = null;
		try (Connection c = ConnectionUtil.getConnectionFromFile()) {
			PreparedStatement ps = c.prepareStatement(sql);
			ps.setInt(1, id);
			log.info(ps);
			ResultSet rs = ps.executeQuery();

			if (rs.next()) {
				offer = new Offer();
				returnData(rs, offer);
			}
		} catch (SQLException | IOException e) {
			// TODO: handle exception
			e.printStackTrace();
		}
		return offer;
	}

	@Override
	public List<Offer> retrieveOffers() {
		// TODO Auto-generated method stub
		String sql = "select * from " + _table + " ORDER by id;";
		List<Offer> offers = new ArrayList<>();

		try (Connection c = ConnectionUtil.getConnectionFromFile()) {
			Statement s = c.createStatement();
			ResultSet rs = s.executeQuery(sql);

			while (rs.next()) {
				// extract each field from rs for each record, map them to a Offer object and
				// add them to the offers arrayliost
				Offer offer = new Offer();
				returnData(rs, offer);
				offers.add(offer);

			}
		} catch (SQLException | IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return offers;
	}

	@Override
	public List<Offer> retrieveOffers(int status) {
		// TODO Auto-generated method stub
		String sql = "select * from " + _table + " where status = ? order by product_id , offer_price desc;";
		List<Offer> offers = new ArrayList<>();

		try (Connection c = ConnectionUtil.getConnectionFromFile()) {
			PreparedStatement ps = c.prepareStatement(sql);
			ps.setInt(1, status);
			log.info(ps);
			ResultSet rs = ps.executeQuery();

			while (rs.next()) {
				// extract each field from rs for each record, map them to a Offer object and
				// add them to the offers arrayliost
				Offer offer = new Offer();
				returnData(rs, offer);
				offers.add(offer);

			}
		} catch (SQLException | IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return offers;
	}

	@Override
	public boolean updateOffer(Offer o) {
		// TODO Auto-generated method stub
		String sql = "update " + _table + " set offer_price = ?  where id = ?;";
		int rowsChanged = -1;

		try (Connection c = ConnectionUtil.getConnectionFromFile()) {
			PreparedStatement ps = c.prepareStatement(sql);
			ps.setDouble(1, o.getOffer_price());
			ps.setInt(2, o.getId());
			log.info(ps);
			rowsChanged = ps.executeUpdate();

		} catch (SQLException | IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		if (rowsChanged < 1) {
			return false;
		}
		return true;
	}

	@Override
	public boolean deleteOfferById(int id) {
		// TODO Auto-generated method stub
		String sql = "delete from " + _table + " where id = ?;";
		int rowsChanged = -1;
		try (Connection c = ConnectionUtil.getConnectionFromFile()) {
			PreparedStatement ps = c.prepareStatement(sql);

			ps.setInt(1, id);
			log.info(ps);
			rowsChanged = ps.executeUpdate();

		} catch (SQLException | IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		if (rowsChanged < 1) {
			return false;
		}
		return true;
	}

	@Override
	public List<Offer> retrieveOfferByUserId(int id) {
		// TODO Auto-generated method stub
		String sql = "select * from " + _table + " where user_id = ? ORDER by id";
		List<Offer> offers = new ArrayList<>();

		try (Connection c = ConnectionUtil.getConnectionFromFile()) {
			PreparedStatement ps = c.prepareStatement(sql);
			ps.setInt(1, id);
			log.info(ps);
			ResultSet rs = ps.executeQuery();
			while (rs.next()) {
				// extract each field from rs for each record, map them to a Offer object and
				// add them to the offers arrayliost
				Offer offer = new Offer();
				returnData(rs, offer);
				offers.add(offer);

			}
		} catch (SQLException | IOException e) {
			// TODO: handle exception
			e.printStackTrace();
		}
		return offers;
	}

	/*
	 * rowsChanged_2 is not verified because when there is only 1 offer
	 */
	@Override
	public boolean acceptOffer(int id, int pid) {
		String sql_1 = "update " + _table + " set status = 1 where id = ?;";
		String sql_2 = "update " + _table + " set status = 2 where id != ? and product_id = ?;";
		int rowsChanged_1 = -1, rowsChanged_2 = -1;

		try (Connection c = ConnectionUtil.getConnectionFromFile()) {

			PreparedStatement ps_1 = c.prepareStatement(sql_1);
			ps_1.setInt(1, id);
			rowsChanged_1 = ps_1.executeUpdate();
			log.info(ps_1);
			PreparedStatement ps_2 = c.prepareStatement(sql_2);
			ps_2.setInt(1, id);
			ps_2.setInt(2, pid);
			log.info(ps_2);
			rowsChanged_2 = ps_2.executeUpdate();

			if (rowsChanged_1 < 1) {
				return false;
			}
		} catch (SQLException | IOException e) {
			// TODO: handle exception
			e.printStackTrace();
		}
		return true;
	}

	/*
	 * return true when no other offers accepted
	 */
	@Override
	public boolean verifyAcceptOffer(int pid) {
		// TODO Auto-generated method stub
		String sql = "select count(id) as counter from " + _table + " where product_id = ? and status = 1 ";
		Offer offer = null;
		try (Connection c = ConnectionUtil.getConnectionFromFile()) {
			PreparedStatement ps = c.prepareStatement(sql);
			ps.setInt(1, pid);
			log.info(ps);
			ResultSet rs = ps.executeQuery();

			if (rs.next()) {
				int count = rs.getInt("counter");
				if (count > 0) {
					return false;
				}
			}
		} catch (SQLException | IOException e) {
			// TODO: handle exception
			e.printStackTrace();
		}
		return true;
	}

	@Override
	public boolean deleteOfferByProductId(int id) {
		// TODO Auto-generated method stub
		String sql = "delete from " + _table + " where product_id = ?;";
		int rowsChanged = -1;
		try (Connection c = ConnectionUtil.getConnectionFromFile()) {
			PreparedStatement ps = c.prepareStatement(sql);

			ps.setInt(1, id);
			log.info(ps);
			rowsChanged = ps.executeUpdate();

		} catch (SQLException | IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		if (rowsChanged < 1) {
			return false;
		}
		return true;
	}

	@Override
	public boolean rejectOffer(int id) {
		String sql_1 = "update " + _table + " set status = 2 where id = ?;";
		int rowsChanged_1 = -1;

		try (Connection c = ConnectionUtil.getConnectionFromFile()) {
			PreparedStatement ps_1 = c.prepareStatement(sql_1);
			ps_1.setInt(1, id);
			log.info(ps_1);
			rowsChanged_1 = ps_1.executeUpdate();

			if (rowsChanged_1 < 1) {
				return false;
			}
		} catch (SQLException | IOException e) {
			// TODO: handle exception
			e.printStackTrace();
		}
		return true;
	}

	@Override
	public Offer retrieveMaxOfferByProductId(int pid) {
		// TODO Auto-generated method stub
		String sql = "select * from " + _table + " where product_id = ? order by offer_price desc limit 1";
		Offer offer = null;
		try (Connection c = ConnectionUtil.getConnectionFromFile()) {
			PreparedStatement ps = c.prepareStatement(sql);
			ps.setInt(1, pid);
			log.info(ps);
			ResultSet rs = ps.executeQuery();

			if (rs.next()) {
				offer = new Offer();
				returnData(rs, offer);
			}
		} catch (SQLException | IOException e) {
			// TODO: handle exception
			e.printStackTrace();
		}
		return offer;
	}

	@Override
	public Offer retrieveOfferByCustomer(int pid, int uid, int status ) {
		// TODO Auto-generated method stub
		String sql = "select * from " + _table + " where product_id = ? and user_id = ? and status = ?";
		Offer offer = null;
		try (Connection c = ConnectionUtil.getConnectionFromFile()) {
			PreparedStatement ps = c.prepareStatement(sql);
			ps.setInt(1, pid);
			ps.setInt(2, uid);
			ps.setInt(3, status);
			log.info(ps);
			ResultSet rs = ps.executeQuery();

			if (rs.next()) {
				offer = new Offer();
				returnData(rs, offer);
			}
		} catch (SQLException | IOException e) {
			// TODO: handle exception
			e.printStackTrace();
		}
		return offer;
	}

	@Override
	public Offer returnData(ResultSet rs, Offer o) {
		// TODO Auto-generated method stub
		try {
			o.setId(rs.getInt("id"));
			o.setOffer_price(rs.getDouble("offer_price"));
			o.setProduct_id(rs.getInt("product_id"));
			o.setUser_id(rs.getInt("user_id"));
			o.setStatus(rs.getInt("status"));
			o.setCreated_at(rs.getTimestamp("created_at"));
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return o;
	}

}
